package org.jprotocol.codegen

import java.util.logging.*

class JavaGenerator {
	def pack
	def name
	def builder
  	def ant = new AntBuilder()
	private final static logger = Logger.getLogger(JavaGenerator.class.getName())

	JavaGenerator(pack, name) {
		this.pack = pack
		this.name = name
		builder = new JavaBuilder()
	}
	
	def stdPackage() {
        line "package ${pack}"
	}
	def stdJavaDoc(String...comments) {
        javadoc() {
            comment "This class is generated by ${this.class.simpleName}.groovy"
            comment "@author eliasa01"
            comments.each {
                comment it
            }
        }
	}
	
	def getExt() {
	    'java'
	}
	
  	def save(path) {
  		File f = new File("${path}/${pack.replace('.', '/')}")
  		f.mkdirs()
  		f = new File(f, "${name}.${ext}")
//  		makeWritable(f)
	  	def out = new FileWriter(f)
  		try {
		  	out << result
		  	out.flush()
  		} finally {
  		    out.close()
  		    logger.info ("Generated file: ${f.absolutePath}")
  		}
  	}
  	void makeWritable(def file) {
        if (file.exists()) ant.attrib(file: file.absolutePath, readonly: false)
	}
  	
  	def genCommentLine() {
  		comment "/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////"
  	}

  	def getResult() {
	  	return builder.result
  	}

  	def line(str) { builder.line str }
  	def comment(str) { builder.comment str }
  	def javadoc(closure) { builder.javadoc(closure) }
  	def block(str, closure) { builder.block(str, closure) }
  	def iargblock(str, closure) { builder.iargblock(str, closure) }
  	def dslblock(str, closure) { builder.dslblock(str, closure) }
  	def dslline(str, closure) { builder.dslline(str, closure) }
  	def mainflow(str, closure) { builder.mainflow(str, closure) }
  	def commaflow(str, closure) { builder.commaflow(str, closure) }
  	def simpleline(str) { builder.simpleline(str) }
  	def flow(str, closure) { builder.flow(str, closure) }
  	
    def commaSeparatedLines(list, closure) {
        for (int i = 0; i < list.size(); i++) {
            def line = closure.call(list.get(i))
            if (i < list.size() - 1) line += ","
            simpleline line
        }
    }

  	
}